{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MDBContainer, MDBRow, MDBCol } from 'mdb-react-ui-kit';\nimport HeroSection from '../Components/HeroSection';\nimport TaskCard from '../Components/ProductCard';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const [user_id, setUserID] = useState(null);\n  const [gender, setGender] = useState(null);\n  const [height, setHeight] = useState(null);\n  const [weight, setWeight] = useState(null);\n  const [waist, setWaist] = useState(null);\n  const [skintone, setSkinTone] = useState(null); // Add state for skin tone\n\n  useEffect(() => {\n    // Fetch the user ID and profile data from the backend API\n    const fetchUserData = async () => {\n      try {\n        const response = await api.get('/home', {\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}` // Assuming you're using token-based auth\n          }\n        });\n        setUserID(response.data.user_id);\n        setGender(response.data.gender);\n        setHeight(response.data.height);\n        setWeight(response.data.weight);\n        setWaist(response.data.waist);\n        setSkinTone(response.data.skintone); // Set the skin tone from the response\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(HeroSection, {\n      user_id: user_id,\n      gender: gender,\n      height: height,\n      weight: weight,\n      waist: waist,\n      skintone: skintone // Pass the skin tone to HeroSection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n      children: suggestions.map((product, index) => /*#__PURE__*/_jsxDEV(MDBCol, {\n        size: \"4\",\n        children: /*#__PURE__*/_jsxDEV(TaskCard, {\n          product: product\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"ciQ8x/4JsWEMLBODpfTKRSHx0fM=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","MDBContainer","MDBRow","MDBCol","HeroSection","TaskCard","api","jsxDEV","_jsxDEV","Home","_s","suggestions","setSuggestions","user_id","setUserID","gender","setGender","height","setHeight","weight","setWeight","waist","setWaist","skintone","setSkinTone","fetchUserData","response","get","headers","localStorage","getItem","data","error","console","fluid","children","fileName","_jsxFileName","lineNumber","columnNumber","map","product","index","size","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol } from 'mdb-react-ui-kit';\r\nimport HeroSection from '../Components/HeroSection';\r\nimport TaskCard from '../Components/ProductCard';\r\nimport api from '../utils/api';\r\n\r\nconst Home = () => {\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [user_id, setUserID] = useState(null);\r\n  const [gender, setGender] = useState(null);\r\n  const [height, setHeight] = useState(null);\r\n  const [weight, setWeight] = useState(null);\r\n  const [waist, setWaist] = useState(null);\r\n  const [skintone, setSkinTone] = useState(null); // Add state for skin tone\r\n\r\n  useEffect(() => { \r\n    // Fetch the user ID and profile data from the backend API\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await api.get('/home', {\r\n          headers: {\r\n            'Authorization': `Bearer ${localStorage.getItem('token')}`, // Assuming you're using token-based auth\r\n          },\r\n        });\r\n        setUserID(response.data.user_id);\r\n        setGender(response.data.gender);\r\n        setHeight(response.data.height);\r\n        setWeight(response.data.weight);\r\n        setWaist(response.data.waist);\r\n        setSkinTone(response.data.skintone); // Set the skin tone from the response\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  return (\r\n    <MDBContainer fluid>\r\n      <HeroSection\r\n        user_id={user_id}\r\n        gender={gender}\r\n        height={height}\r\n        weight={weight}\r\n        waist={waist}\r\n        skintone={skintone} // Pass the skin tone to HeroSection\r\n      />\r\n      <MDBRow>\r\n        {suggestions.map((product, index) => (\r\n          <MDBCol key={index} size='4'>\r\n            <TaskCard product={product} />\r\n          </MDBCol>\r\n        ))}\r\n      </MDBRow>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}