{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\ProductCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { MDBCard, MDBCardBody } from 'mdb-react-ui-kit';\nimport './ProductCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCard = () => {\n  _s();\n  const {\n    gender,\n    taskId\n  } = useParams(); // Get gender and taskId from URL params\n  const [cards, setCards] = useState([]);\n  const [subcategory, setSubcategory] = useState(taskId); // Set taskId as subcategory\n\n  useEffect(() => {\n    if (gender && taskId) {\n      fetchData(gender, taskId); // Fetch data when both params are available\n    }\n  }, [gender, taskId]);\n  const fetchData = async (gen, subcategory) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get-data?search_term=${subcategory}&gender=${gen}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('Fetched data:', data);\n      setCards(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const renderCards = () => {\n    const rows = [];\n    for (let i = 0; i < cards.length; i += 3) {\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\n      rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-row\",\n        children: rowItems.map((item, index) => /*#__PURE__*/_jsxDEV(MDBCard, {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(MDBCardBody, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.URL_image,\n              alt: item.Brand,\n              className: \"card-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: item.Brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.Description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/home/${gender}/${subcategory}/${item.Id_Product}`,\n              className: \"card-button\",\n              children: \"Learn More\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this)\n        }, `card-${i + index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this))\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: cards.length > 0 ? renderCards() : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No cards available!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCard, \"8ZJeDcvWuiHAPKBZabW0s8wznnk=\", false, function () {\n  return [useParams];\n});\n_c = TaskCard;\nexport default TaskCard;\nvar _c;\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","MDBCard","MDBCardBody","jsxDEV","_jsxDEV","TaskCard","_s","gender","taskId","cards","setCards","subcategory","setSubcategory","fetchData","gen","response","fetch","ok","Error","data","json","console","log","error","renderCards","rows","i","length","rowItems","slice","push","className","children","map","item","index","src","URL_image","alt","Brand","fileName","_jsxFileName","lineNumber","columnNumber","Description","to","Id_Product","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/ProductCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { MDBCard, MDBCardBody } from 'mdb-react-ui-kit';\r\nimport './ProductCard.css';\r\n\r\nconst TaskCard = () => {\r\n  const { gender, taskId } = useParams(); // Get gender and taskId from URL params\r\n  const [cards, setCards] = useState([]);\r\n  const [subcategory, setSubcategory] = useState(taskId); // Set taskId as subcategory\r\n\r\n  useEffect(() => {\r\n    if (gender && taskId) {\r\n      fetchData(gender, taskId); // Fetch data when both params are available\r\n    }\r\n  }, [gender, taskId]);\r\n\r\n  const fetchData = async (gen, subcategory) => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:5000/get-data?search_term=${subcategory}&gender=${gen}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data);\r\n      setCards(data);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const renderCards = () => {\r\n    const rows = [];\r\n    for (let i = 0; i < cards.length; i += 3) {\r\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\r\n      rows.push(\r\n        <div className=\"card-row\" key={`row-${i}`}>\r\n          {rowItems.map((item, index) => (\r\n            <MDBCard className=\"card\" key={`card-${i + index}`}>\r\n              <MDBCardBody>\r\n                <img src={item.URL_image} alt={item.Brand} className=\"card-image\" />\r\n                <h2>{item.Brand}</h2>\r\n                <p>{item.Description}</p>\r\n                <Link to={`/home/${gender}/${subcategory}/${item.Id_Product}`} className=\"card-button\">\r\n                  Learn More\r\n                </Link>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      {cards.length > 0 ? renderCards() : <div>No cards available!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}