{"ast":null,"code":"const api = axios.create({\n  baseURL: 'http://localhost:8000/api/user/',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include the token\napi.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('access_token'); // Use sessionStorage instead of localStorage\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`; // Add token to headers\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["api","axios","create","baseURL","headers","interceptors","request","use","config","token","sessionStorage","getItem","Authorization","error","Promise","reject"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/utils/api.js"],"sourcesContent":["const api = axios.create({\r\n  baseURL: 'http://localhost:8000/api/user/',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor to include the token\r\napi.interceptors.request.use(config => {\r\n  const token = sessionStorage.getItem('access_token'); // Use sessionStorage instead of localStorage\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`; // Add token to headers\r\n  }\r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\nexport default api;\r\n\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,KAAK,CAACC,MAAM,CAAC;EACvBC,OAAO,EAAE,iCAAiC;EAC1CC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EACtD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE,CAAC,CAAC;EACpD;EACA,OAAOD,MAAM;AACf,CAAC,EAAEK,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}