{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\ProductCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { MDBCard, MDBCardBody } from 'mdb-react-ui-kit';\nimport './ProductCard.css';\nimport './HeroSection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductCard = () => {\n  _s();\n  const path = window.location.pathname.split('/');\n  const gender = path[2]; // Assuming it's at the 3rd position\n  const taskId = path[3]; // Assuming it's at the 4th position\n\n  const [cards, setCards] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [subcategory, setSubcategory] = useState('');\n  useEffect(() => {\n    setSearchTerm(taskId); // Set taskId as searchTerm\n    fetchData(gender, taskId); // Fetch data based on gender and taskId\n  }, [gender, taskId]);\n  const fetchData = async (gen, subcategory) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get-data?search_term=${subcategory}&gender=${gen}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setCards(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const renderCards = () => {\n    const rows = [];\n    for (let i = 0; i < cards.length; i += 3) {\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\n      rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-row\",\n        children: rowItems.map((item, index) => /*#__PURE__*/_jsxDEV(MDBCard, {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(MDBCardBody, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.URL_image,\n              alt: item.Brand,\n              className: \"card-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: item.Brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.Description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/home/${gender}/${taskId}/${item.Id_Product}` // Ensure taskId is always included\n              ,\n              className: \"card-button\",\n              children: \"Learn More\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)\n        }, `card-${i + index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this))\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: cards.length > 0 ? renderCards() : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No cards available!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductCard, \"5xFcV4a5/Z8OAB+kdsVdPVY/CFw=\");\n_c = ProductCard;\nexport default ProductCard;\nvar _c;\n$RefreshReg$(_c, \"ProductCard\");","map":{"version":3,"names":["React","useEffect","useState","Link","MDBCard","MDBCardBody","jsxDEV","_jsxDEV","ProductCard","_s","path","window","location","pathname","split","gender","taskId","cards","setCards","searchTerm","setSearchTerm","subcategory","setSubcategory","fetchData","gen","response","fetch","ok","Error","data","json","error","console","renderCards","rows","i","length","rowItems","slice","push","className","children","map","item","index","src","URL_image","alt","Brand","fileName","_jsxFileName","lineNumber","columnNumber","Description","to","Id_Product","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/ProductCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { MDBCard, MDBCardBody } from 'mdb-react-ui-kit';\r\nimport './ProductCard.css';\r\nimport './HeroSection'\r\n\r\nconst ProductCard = () => {\r\n  const path = window.location.pathname.split('/');\r\n  const gender = path[2];  // Assuming it's at the 3rd position\r\n  const taskId = path[3];  // Assuming it's at the 4th position\r\n\r\n  const [cards, setCards] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [subcategory, setSubcategory] = useState('');\r\n\r\n  useEffect(() => {\r\n    setSearchTerm(taskId);  // Set taskId as searchTerm\r\n    fetchData(gender, taskId);  // Fetch data based on gender and taskId\r\n  }, [gender, taskId]);\r\n\r\n  const fetchData = async (gen, subcategory) => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:5000/get-data?search_term=${subcategory}&gender=${gen}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      setCards(data);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const renderCards = () => {\r\n    const rows = [];\r\n    for (let i = 0; i < cards.length; i += 3) {\r\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\r\n      rows.push(\r\n        <div className=\"card-row\" key={`row-${i}`}>\r\n          {rowItems.map((item, index) => (\r\n            <MDBCard className=\"card\" key={`card-${i + index}`}>\r\n              <MDBCardBody>\r\n                <img\r\n                  src={item.URL_image}\r\n                  alt={item.Brand}\r\n                  className=\"card-image\"\r\n                />\r\n                <h2>{item.Brand}</h2>\r\n                <p>{item.Description}</p>\r\n                <Link \r\n                  to={`/home/${gender}/${taskId}/${item.Id_Product}`} // Ensure taskId is always included\r\n                  className=\"card-button\"\r\n                >\r\n                  Learn More\r\n                </Link>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      {cards.length > 0 ? renderCards() : <div>No cards available!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}