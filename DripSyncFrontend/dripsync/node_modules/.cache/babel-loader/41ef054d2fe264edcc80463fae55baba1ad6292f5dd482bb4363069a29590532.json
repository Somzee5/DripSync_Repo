{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\ProductCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MDBCard, MDBCardBody, MDBBtn } from 'mdb-react-ui-kit';\nimport './ProductCard.css'; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductCard = ({\n  product\n}) => {\n  return /*#__PURE__*/_jsxDEV(MDBCard, {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(MDBCardBody, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: product.URL_image,\n        alt: product.Brand,\n        className: \"card-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: product.Brand\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: product.Description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n        onClick: () => alert(`Learn more about ${product.Brand}`),\n        children: \"Learn More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = ProductCard;\nconst TaskCard = () => {\n  _s();\n  const {\n    gender,\n    taskId\n  } = useParams(); // Extract gender and taskId from route parameters\n  const [cards, setCards] = useState([]); // State to hold fetched cards\n  const [searchTerm, setSearchTerm] = useState('');\n  useEffect(() => {\n    setGender;\n    setSearchTerm(taskId); // Set the search term based on route\n    fetchData(); // Fetch data when component mounts\n  }, [taskId, gender]); // Dependency on gender and taskId\n\n  const fetchData = async () => {\n    try {\n      // Use template literals to create the correct URL\n      const response = await fetch(`http://127.0.0.1:5000/get-data?gender=${gender}&search_term=${encodeURIComponent(searchTerm)}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('Fetched data:', data); // Log the fetched data\n      setCards(data); // Update state with fetched cards\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const renderCards = () => {\n    const rows = [];\n    for (let i = 0; i < cards.length; i += 3) {\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\n      rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-row\",\n        children: rowItems.map((item, index) => /*#__PURE__*/_jsxDEV(ProductCard, {\n          product: item\n        }, `card-${i + index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this) // Using ProductCard here\n        )\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: cards.length > 0 ? renderCards() : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No cards available!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCard, \"b/BKhWo4lXKA7uWMF693Y/FnEEE=\", false, function () {\n  return [useParams];\n});\n_c2 = TaskCard;\nexport default TaskCard;\nvar _c, _c2;\n$RefreshReg$(_c, \"ProductCard\");\n$RefreshReg$(_c2, \"TaskCard\");","map":{"version":3,"names":["React","useEffect","useState","useParams","MDBCard","MDBCardBody","MDBBtn","jsxDEV","_jsxDEV","ProductCard","product","className","children","src","URL_image","alt","Brand","fileName","_jsxFileName","lineNumber","columnNumber","Description","onClick","alert","_c","TaskCard","_s","gender","taskId","cards","setCards","searchTerm","setSearchTerm","setGender","fetchData","response","fetch","encodeURIComponent","ok","Error","data","json","console","log","error","renderCards","rows","i","length","rowItems","slice","push","map","item","index","_c2","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/ProductCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MDBCard, MDBCardBody, MDBBtn } from 'mdb-react-ui-kit';\r\nimport './ProductCard.css'; // Import CSS file\r\n\r\nconst ProductCard = ({ product }) => {\r\n  return (\r\n    <MDBCard className=\"card\">\r\n      <MDBCardBody>\r\n        <img src={product.URL_image} alt={product.Brand} className=\"card-image\" />\r\n        <h5>{product.Brand}</h5>\r\n        <p>{product.Description}</p>\r\n        <MDBBtn onClick={() => alert(`Learn more about ${product.Brand}`)}>Learn More</MDBBtn>\r\n      </MDBCardBody>\r\n    </MDBCard>\r\n  );\r\n};\r\n\r\nconst TaskCard = () => {\r\n  const { gender, taskId } = useParams(); // Extract gender and taskId from route parameters\r\n  const [cards, setCards] = useState([]); // State to hold fetched cards\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    setGender\r\n    setSearchTerm(taskId); // Set the search term based on route\r\n    fetchData(); // Fetch data when component mounts\r\n  }, [taskId, gender]); // Dependency on gender and taskId\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      // Use template literals to create the correct URL\r\n      const response = await fetch(`http://127.0.0.1:5000/get-data?gender=${gender}&search_term=${encodeURIComponent(searchTerm)}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data); // Log the fetched data\r\n      setCards(data); // Update state with fetched cards\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const renderCards = () => {\r\n    const rows = [];\r\n    for (let i = 0; i < cards.length; i += 3) {\r\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\r\n      rows.push(\r\n        <div className=\"card-row\" key={`row-${i}`}>\r\n          {rowItems.map((item, index) => (\r\n            <ProductCard key={`card-${i + index}`} product={item} /> // Using ProductCard here\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      {cards.length > 0 ? renderCards() : <div>No cards available!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}