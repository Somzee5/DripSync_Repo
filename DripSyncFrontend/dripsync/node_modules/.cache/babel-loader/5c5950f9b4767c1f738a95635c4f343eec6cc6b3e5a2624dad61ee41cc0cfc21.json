{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport api from '../utils/api'; // Assuming this is where you configure your API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        // Make a request to the /me/ endpoint to check if the user is authenticated\n        await api.get('/me/');\n        setIsAuthenticated(true);\n      } catch (error) {\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthentication();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this); // Or some kind of spinner while checking authentication\n  }\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(ProtectedRoute, \"Ax+B/BOELR06clzL32vENhaokmk=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useState","useEffect","Route","Redirect","api","jsxDEV","_jsxDEV","ProtectedRoute","component","Component","rest","_s","isAuthenticated","setIsAuthenticated","loading","setLoading","checkAuthentication","get","error","children","fileName","_jsxFileName","lineNumber","columnNumber","render","props","to","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport api from '../utils/api';  // Assuming this is where you configure your API calls\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAuthentication = async () => {\r\n      try {\r\n        // Make a request to the /me/ endpoint to check if the user is authenticated\r\n        await api.get('/me/');\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        setIsAuthenticated(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuthentication();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;  // Or some kind of spinner while checking authentication\r\n  }\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAuthenticated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/login\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,OAAOC,GAAG,MAAM,cAAc,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF;QACA,MAAMZ,GAAG,CAACa,GAAG,CAAC,MAAM,CAAC;QACrBJ,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdL,kBAAkB,CAAC,KAAK,CAAC;MAC3B,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE;IACX,oBAAOR,OAAA;MAAAa,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAE;EACjC;EAEA,oBACEjB,OAAA,CAACJ,KAAK;IAAA,GACAQ,IAAI;IACRc,MAAM,EAAGC,KAAK,IACZb,eAAe,gBACbN,OAAA,CAACG,SAAS;MAAA,GAAKgB;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBjB,OAAA,CAACH,QAAQ;MAACuB,EAAE,EAAC;IAAQ;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAE1B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEN,CAAC;AAACZ,EAAA,CApCIJ,cAAc;AAAAoB,EAAA,GAAdpB,cAAc;AAsCpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}