{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Pages\\\\Home.js\",\n  _s = $RefreshSig$();\n// pages/Home.js\nimport React, { useState } from 'react';\nimport { MDBContainer, MDBRow, MDBCol } from 'mdb-react-ui-kit';\nimport HeroSection from '../Components/HeroSection';\nimport ProductCard from '../Components/ProductCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [suggestions, setSuggestions] = useState([]);\n  const handleSearch = query => {\n    // Logic to fetch search suggestions from backend based on query\n    // For now, let's just simulate with static data\n    if (query.length > 1) {\n      setSuggestions(['Suggestion 1', 'Suggestion 2', 'Suggestion 3']);\n    } else {\n      setSuggestions([]);\n    }\n  };\n  const products = [{\n    name: 'Pants',\n    image: '/path/to/pants.jpg',\n    price: 100,\n    discountedPrice: 80\n  }, {\n    name: 'Shirt',\n    image: '/path/to/shirt.jpg',\n    price: 120,\n    discountedPrice: 95\n  }];\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    fluid: true,\n    className: \"home-page\",\n    children: [/*#__PURE__*/_jsxDEV(HeroSection, {\n      handleSearch: handleSearch,\n      suggestions: suggestions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MDBRow, {\n      className: \"product-cards mt-5\",\n      children: products.map((product, index) => /*#__PURE__*/_jsxDEV(MDBCol, {\n        md: \"9\",\n        children: /*#__PURE__*/_jsxDEV(ProductCard, {\n          product: product\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"xLFRUKi5CexG/Qcuhka4a4H1SoY=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","MDBContainer","MDBRow","MDBCol","HeroSection","ProductCard","jsxDEV","_jsxDEV","Home","_s","suggestions","setSuggestions","handleSearch","query","length","products","name","image","price","discountedPrice","fluid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","product","index","md","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Pages/Home.js"],"sourcesContent":["// pages/Home.js\r\nimport React, { useState } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol } from 'mdb-react-ui-kit';\r\nimport HeroSection from '../Components/HeroSection';\r\nimport ProductCard from '../Components/ProductCard';\r\n\r\nconst Home = () => {\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  const handleSearch = (query) => {\r\n    // Logic to fetch search suggestions from backend based on query\r\n    // For now, let's just simulate with static data\r\n    if (query.length > 1) {\r\n      setSuggestions(['Suggestion 1', 'Suggestion 2', 'Suggestion 3']);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const products = [\r\n    { name: 'Pants', image: '/path/to/pants.jpg', price: 100, discountedPrice: 80 },\r\n    { name: 'Shirt', image: '/path/to/shirt.jpg', price: 120, discountedPrice: 95 }\r\n  ];\r\n\r\n  return (\r\n    <MDBContainer fluid className=\"home-page\">\r\n      {/* Hero Section */}\r\n      <HeroSection handleSearch={handleSearch} suggestions={suggestions} />\r\n\r\n      {/* Product Cards */}\r\n      <MDBRow className=\"product-cards mt-5\">\r\n        {products.map((product, index) => (\r\n          <MDBCol md=\"9\" key={index}>\r\n            <ProductCard product={product} />\r\n          </MDBCol>\r\n        ))}\r\n      </MDBRow>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,EAAEC,MAAM,EAAEC,MAAM,QAAQ,kBAAkB;AAC/D,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,WAAW,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMY,YAAY,GAAIC,KAAK,IAAK;IAC9B;IACA;IACA,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpBH,cAAc,CAAC,CAAC,cAAc,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;IAClE,CAAC,MAAM;MACLA,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;EAED,MAAMI,QAAQ,GAAG,CACf;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,oBAAoB;IAAEC,KAAK,EAAE,GAAG;IAAEC,eAAe,EAAE;EAAG,CAAC,EAC/E;IAAEH,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE,oBAAoB;IAAEC,KAAK,EAAE,GAAG;IAAEC,eAAe,EAAE;EAAG,CAAC,CAChF;EAED,oBACEZ,OAAA,CAACN,YAAY;IAACmB,KAAK;IAACC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBAEvCf,OAAA,CAACH,WAAW;MAACQ,YAAY,EAAEA,YAAa;MAACF,WAAW,EAAEA;IAAY;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGrEnB,OAAA,CAACL,MAAM;MAACmB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EACnCP,QAAQ,CAACY,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BtB,OAAA,CAACJ,MAAM;QAAC2B,EAAE,EAAC,GAAG;QAAAR,QAAA,eACZf,OAAA,CAACF,WAAW;UAACuB,OAAO,EAAEA;QAAQ;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADfG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjB,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEnB,CAAC;AAACjB,EAAA,CAjCID,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AAmCV,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}