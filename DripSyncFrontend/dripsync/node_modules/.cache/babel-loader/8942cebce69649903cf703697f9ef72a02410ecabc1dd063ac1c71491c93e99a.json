{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\ProductCard.js\",\n  _s = $RefreshSig$();\n// components/productCard.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { MDBCard, MDBCardBody, MDBBtn } from 'mdb-react-ui-kit';\nimport './ProductCard.css'; // Import CSS file\n/*\r\nconst ProductCard = ({ product }) => {\r\n  return (\r\n    <MDBCard className=\"card\">\r\n      <MDBCardBody>\r\n        <img src={product.URL_image} alt={product.Brand} className=\"card-image\" />\r\n        <h5>{product.Brand}</h5>\r\n        <p>{product.Description}</p>\r\n        <MDBBtn onClick={() => alert(`Learn more about ${product.Brand}`)}>Learn More</MDBBtn>\r\n      </MDBCardBody>\r\n    </MDBCard>\r\n  );\r\n};\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCard = () => {\n  _s();\n  const {\n    taskId\n  } = useParams();\n  const [cards, setCards] = useState([]); // State to hold fetched cards\n  const [searchTerm, setSearchTerm] = useState('');\n  useEffect(() => {\n    setSearchTerm(taskId); // Set the search term based on route\n    fetchData(taskId); // Fetch data when component mounts\n  }, [taskId]);\n  const fetchData = async searchTerm => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get-data?search_term=${searchTerm}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('Fetched data:', data); // Log the fetched data\n      setCards(data); // Update state with fetched cards\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const renderCards = () => {\n    const rows = [];\n    for (let i = 0; i < cards.length; i += 3) {\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\n      rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-row\",\n        children: rowItems.map((item, index) => /*#__PURE__*/_jsxDEV(ProductCard, {\n          product: item\n        }, `card-${i + index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this) // Using ProductCard here\n        )\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: cards.length > 0 ? renderCards() : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No cards available!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 43\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCard, \"UT06H1G+wURwof4r3a0u/JxsT9w=\", false, function () {\n  return [useParams];\n});\n_c = TaskCard;\nexport default TaskCard;\nvar _c;\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"names":["React","useEffect","useState","useParams","MDBCard","MDBCardBody","MDBBtn","jsxDEV","_jsxDEV","TaskCard","_s","taskId","cards","setCards","searchTerm","setSearchTerm","fetchData","response","fetch","ok","Error","data","json","console","log","error","renderCards","rows","i","length","rowItems","slice","push","className","children","map","item","index","ProductCard","product","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/ProductCard.js"],"sourcesContent":["// components/productCard.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { MDBCard, MDBCardBody, MDBBtn } from 'mdb-react-ui-kit';\r\nimport './ProductCard.css'; // Import CSS file\r\n/*\r\nconst ProductCard = ({ product }) => {\r\n  return (\r\n    <MDBCard className=\"card\">\r\n      <MDBCardBody>\r\n        <img src={product.URL_image} alt={product.Brand} className=\"card-image\" />\r\n        <h5>{product.Brand}</h5>\r\n        <p>{product.Description}</p>\r\n        <MDBBtn onClick={() => alert(`Learn more about ${product.Brand}`)}>Learn More</MDBBtn>\r\n      </MDBCardBody>\r\n    </MDBCard>\r\n  );\r\n};\r\n*/\r\nconst TaskCard = () => {\r\n  const { taskId } = useParams();\r\n  const [cards, setCards] = useState([]); // State to hold fetched cards\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    setSearchTerm(taskId); // Set the search term based on route\r\n    fetchData(taskId); // Fetch data when component mounts\r\n  }, [taskId]);\r\n\r\n  const fetchData = async (searchTerm) => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:5000/get-data?search_term=${searchTerm}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log('Fetched data:', data); // Log the fetched data\r\n      setCards(data); // Update state with fetched cards\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const renderCards = () => {\r\n    const rows = [];\r\n    for (let i = 0; i < cards.length; i += 3) {\r\n      const rowItems = cards.slice(i, i + 3); // Get a row of three items\r\n      rows.push(\r\n        <div className=\"card-row\" key={`row-${i}`}>\r\n          {rowItems.map((item, index) => (\r\n            <ProductCard key={`card-${i + index}`} product={item} /> // Using ProductCard here\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return rows;\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      {cards.length > 0 ? renderCards() : <div>No cards available!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}