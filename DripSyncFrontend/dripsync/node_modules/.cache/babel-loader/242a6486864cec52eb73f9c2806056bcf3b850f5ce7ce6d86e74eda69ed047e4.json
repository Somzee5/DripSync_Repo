{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For v6\nimport api from '../utils/api'; // Assuming you're using the api utility for HTTP requests\nimport { MDBBtn, MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBInput, MDBIcon } from 'mdb-react-ui-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const navigate = useNavigate(); // For navigation in v6\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const handleLogin = async e => {\n    e.preventDefault(); // Prevent the form from refreshing the page\n\n    try {\n      // Make the API request to the login endpoint\n      const response = await api.post('/login/', {\n        email,\n        password\n      });\n      const userId = response.data.user.id;\n\n      // Save tokens to localStorage\n      localStorage.setItem('access_token', response.data.access);\n      localStorage.setItem('refresh_token', response.data.refresh);\n\n      // Redirect to the profile setup page using userId\n      navigate(`/${userId}/profile-setup`);\n    } catch (error) {\n      setError('Invalid email or password'); // Show error message\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    fluid: true,\n    className: \"p-4 background-radial-gradient overflow-hidden\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"qCGiFeeUWkiIU+KqUq0nNz+KCrI=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","api","MDBBtn","MDBContainer","MDBRow","MDBCol","MDBCard","MDBCardBody","MDBInput","MDBIcon","jsxDEV","_jsxDEV","Login","_s","navigate","email","setEmail","password","setPassword","error","setError","handleLogin","e","preventDefault","response","post","userId","data","user","id","localStorage","setItem","access","refresh","fluid","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // For v6\r\nimport api from '../utils/api'; // Assuming you're using the api utility for HTTP requests\r\nimport {\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBInput,\r\n  MDBIcon\r\n} from 'mdb-react-ui-kit';\r\n\r\nconst Login = () => {\r\n  const navigate = useNavigate(); // For navigation in v6\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();  // Prevent the form from refreshing the page\r\n\r\n    try {\r\n      // Make the API request to the login endpoint\r\n      const response = await api.post('/login/', { \r\n        email,\r\n        password\r\n      });\r\n\r\n      const userId = response.data.user.id;\r\n\r\n      // Save tokens to localStorage\r\n      localStorage.setItem('access_token', response.data.access);\r\n      localStorage.setItem('refresh_token', response.data.refresh);\r\n\r\n      // Redirect to the profile setup page using userId\r\n      navigate(`/${userId}/profile-setup`); \r\n    } catch (error) {\r\n      setError('Invalid email or password'); // Show error message\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MDBContainer fluid className='p-4 background-radial-gradient overflow-hidden'>\r\n      {/* Form content goes here, same as before */}\r\n    </MDBContainer>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,GAAG,MAAM,cAAc,CAAC,CAAC;AAChC,SACEC,MAAM,EACNC,YAAY,EACZC,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,WAAW,EACXC,QAAQ,EACRC,OAAO,QACF,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMsB,WAAW,GAAG,MAAOC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAE;;IAErB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMvB,GAAG,CAACwB,IAAI,CAAC,SAAS,EAAE;QACzCV,KAAK;QACLE;MACF,CAAC,CAAC;MAEF,MAAMS,MAAM,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAACC,EAAE;;MAEpC;MACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEP,QAAQ,CAACG,IAAI,CAACK,MAAM,CAAC;MAC1DF,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEP,QAAQ,CAACG,IAAI,CAACM,OAAO,CAAC;;MAE5D;MACAnB,QAAQ,CAAC,IAAIY,MAAM,gBAAgB,CAAC;IACtC,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,QAAQ,CAAC,2BAA2B,CAAC,CAAC,CAAC;IACzC;EACF,CAAC;EAED,oBACET,OAAA,CAACR,YAAY;IAAC+B,KAAK;IAACC,SAAS,EAAC;EAAgD;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhE,CAAC;AAEnB,CAAC;AAAA1B,EAAA,CAlCKD,KAAK;EAAA,QACQZ,WAAW;AAAA;AAAAwC,EAAA,GADxB5B,KAAK;AAoCX,eAAeA,KAAK;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}