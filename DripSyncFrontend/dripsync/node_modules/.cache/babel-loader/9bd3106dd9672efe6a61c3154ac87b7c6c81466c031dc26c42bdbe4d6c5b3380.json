{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport api from '../utils/api'; // Assuming you're using the api utility for HTTP requests\nimport { MDBBtn, MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBInput } from 'mdb-react-ui-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const history = useHistory();\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    if (newPassword !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    try {\n      // Assuming you pass the email from the previous component or via some context\n      const email = sessionStorage.getItem('reset_email'); // Modify as needed\n      await api.post('/api/user/reset-password/', {\n        email,\n        new_password: newPassword\n      });\n      setSuccess('Password reset successfully! Redirecting to login...');\n      setError('');\n      setTimeout(() => history.push('/login'), 2000); // Redirect after 2 seconds\n    } catch (error) {\n      setError('Failed to reset password. Please try again.');\n      setSuccess('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MDBContainer, {\n    fluid: true,\n    className: \"p-4 background-radial-gradient overflow-hidden\",\n    children: /*#__PURE__*/_jsxDEV(MDBRow, {\n      children: /*#__PURE__*/_jsxDEV(MDBCol, {\n        md: \"6\",\n        className: \"position-relative\",\n        children: /*#__PURE__*/_jsxDEV(MDBCard, {\n          className: \"my-5 bg-glass\",\n          children: /*#__PURE__*/_jsxDEV(MDBCardBody, {\n            className: \"p-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-center\",\n              children: \"Reset Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleResetPassword,\n              children: [/*#__PURE__*/_jsxDEV(MDBInput, {\n                wrapperClass: \"mb-4\",\n                label: \"New Password\",\n                id: \"new-password\",\n                type: \"password\",\n                value: newPassword,\n                onChange: e => setNewPassword(e.target.value),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(MDBInput, {\n                wrapperClass: \"mb-4\",\n                label: \"Confirm Password\",\n                id: \"confirm-password\",\n                type: \"password\",\n                value: confirmPassword,\n                onChange: e => setConfirmPassword(e.target.value),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-danger text-center\",\n                children: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 27\n              }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-success text-center\",\n                children: success\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(MDBBtn, {\n                className: \"w-100 mb-4\",\n                size: \"md\",\n                type: \"submit\",\n                children: \"Reset Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"+a4v6Bdm/J9in1kD5a+TlkKRLCY=\", false, function () {\n  return [useHistory];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useHistory","api","MDBBtn","MDBContainer","MDBRow","MDBCol","MDBCard","MDBCardBody","MDBInput","jsxDEV","_jsxDEV","ResetPassword","_s","history","newPassword","setNewPassword","confirmPassword","setConfirmPassword","error","setError","success","setSuccess","handleResetPassword","e","preventDefault","email","sessionStorage","getItem","post","new_password","setTimeout","push","fluid","className","children","md","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","wrapperClass","label","id","type","value","onChange","target","required","size","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport api from '../utils/api'; // Assuming you're using the api utility for HTTP requests\r\nimport {\r\n  MDBBtn,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBInput,\r\n} from 'mdb-react-ui-kit';\r\n\r\nconst ResetPassword = () => {\r\n  const history = useHistory();\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleResetPassword = async (e) => {\r\n    e.preventDefault();\r\n    if (newPassword !== confirmPassword) {\r\n      setError('Passwords do not match');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Assuming you pass the email from the previous component or via some context\r\n      const email = sessionStorage.getItem('reset_email'); // Modify as needed\r\n      await api.post('/api/user/reset-password/', { email, new_password: newPassword });\r\n      setSuccess('Password reset successfully! Redirecting to login...');\r\n      setError('');\r\n      setTimeout(() => history.push('/login'), 2000); // Redirect after 2 seconds\r\n    } catch (error) {\r\n      setError('Failed to reset password. Please try again.');\r\n      setSuccess('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MDBContainer fluid className='p-4 background-radial-gradient overflow-hidden'>\r\n      <MDBRow>\r\n        <MDBCol md='6' className='position-relative'>\r\n          <MDBCard className='my-5 bg-glass'>\r\n            <MDBCardBody className='p-5'>\r\n              <h3 className=\"text-center\">Reset Password</h3>\r\n              <form onSubmit={handleResetPassword}>\r\n                <MDBInput\r\n                  wrapperClass='mb-4'\r\n                  label='New Password'\r\n                  id='new-password'\r\n                  type='password'\r\n                  value={newPassword}\r\n                  onChange={(e) => setNewPassword(e.target.value)}\r\n                  required\r\n                />\r\n                <MDBInput\r\n                  wrapperClass='mb-4'\r\n                  label='Confirm Password'\r\n                  id='confirm-password'\r\n                  type='password'\r\n                  value={confirmPassword}\r\n                  onChange={(e) => setConfirmPassword(e.target.value)}\r\n                  required\r\n                />\r\n                {error && <p className=\"text-danger text-center\">{error}</p>}\r\n                {success && <p className=\"text-success text-center\">{success}</p>}\r\n                <MDBBtn className='w-100 mb-4' size='md' type=\"submit\">\r\n                  Reset Password\r\n                </MDBBtn>\r\n              </form>\r\n            </MDBCardBody>\r\n          </MDBCard>\r\n        </MDBCol>\r\n      </MDBRow>\r\n    </MDBContainer>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}