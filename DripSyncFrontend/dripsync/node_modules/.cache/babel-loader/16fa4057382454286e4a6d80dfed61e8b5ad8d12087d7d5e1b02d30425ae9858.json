{"ast":null,"code":"var _jsxFileName = \"D:\\\\DripSync-MP\\\\DripSync_Repo\\\\DripSyncFrontend\\\\dripsync\\\\src\\\\Components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport api from '../utils/api'; // Assuming this is where you configure your API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      try {\n        const accessToken = sessionStorage.getItem('access_token');\n        if (accessToken) {\n          api.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\n          await api.get('/me/'); // Check if the user is authenticated\n          setIsAuthenticated(true);\n        } else {\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthentication();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n};\n_s(ProtectedRoute, \"Ax+B/BOELR06clzL32vENhaokmk=\");\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useState","useEffect","Route","Redirect","api","jsxDEV","_jsxDEV","ProtectedRoute","component","Component","rest","_s","isAuthenticated","setIsAuthenticated","loading","setLoading","checkAuthentication","accessToken","sessionStorage","getItem","defaults","headers","get","error","children","fileName","_jsxFileName","lineNumber","columnNumber","render","props","to","_c","$RefreshReg$"],"sources":["D:/DripSync-MP/DripSync_Repo/DripSyncFrontend/dripsync/src/Components/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport api from '../utils/api';  // Assuming this is where you configure your API calls\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n  \r\n    useEffect(() => {\r\n      const checkAuthentication = async () => {\r\n        try {\r\n          const accessToken = sessionStorage.getItem('access_token');\r\n          if (accessToken) {\r\n            api.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\r\n            await api.get('/me/'); // Check if the user is authenticated\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            setIsAuthenticated(false);\r\n          }\r\n        } catch (error) {\r\n          setIsAuthenticated(false);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n  \r\n      checkAuthentication();\r\n    }, []);\r\n  \r\n    if (loading) {\r\n      return <div>Loading...</div>;\r\n    }\r\n  \r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={(props) =>\r\n          isAuthenticated ? (\r\n            <Component {...props} />\r\n          ) : (\r\n            <Redirect to=\"/\" />\r\n          )\r\n        }\r\n      />\r\n    );\r\n  };\r\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAClD,OAAOC,GAAG,MAAM,cAAc,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,cAAc,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;QAC1D,IAAIF,WAAW,EAAE;UACfb,GAAG,CAACgB,QAAQ,CAACC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUJ,WAAW,EAAE;UAC/D,MAAMb,GAAG,CAACkB,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;UACvBT,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACLA,kBAAkB,CAAC,KAAK,CAAC;QAC3B;MACF,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdV,kBAAkB,CAAC,KAAK,CAAC;MAC3B,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE;IACX,oBAAOR,OAAA;MAAAkB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEtB,OAAA,CAACJ,KAAK;IAAA,GACAQ,IAAI;IACRmB,MAAM,EAAGC,KAAK,IACZlB,eAAe,gBACbN,OAAA,CAACG,SAAS;MAAA,GAAKqB;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBtB,OAAA,CAACH,QAAQ;MAAC4B,EAAE,EAAC;IAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAErB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEN,CAAC;AAACjB,EAAA,CAzCEJ,cAAc;AAAAyB,EAAA,GAAdzB,cAAc;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}